# True color support
set-option -sa terminal-features ',xterm-256color:RGB'

# set-option -ga terminal-overrides ",*256col*:Tc"
# set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
# set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

set -g mouse on

set-option -g default-shell "/bin/bash"
set -g default-command "/bin/bash"

set -g base-index 1
setw -g pane-base-index 1
setw -g mode-keys vi

bind-key x kill-pane # skip "kill-pane 1? (y/n)" prompt

set -g focus-events on
set -g automatic-rename on 
set -g wrap-search off
set -g detach-on-destroy off  # don't exit from tmux when closing a session
set -g history-limit 100000   # scrollback buffer n lines
set -g escape-time 0          # zero-out escape time delay
set -g status-interval 1      # update status every 1 seconds
set -g status-left-length 200 # increase status line length
set -g renumber-windows on    # renumber windows when a window is closed
set -g set-clipboard on

bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
bind-key -T prefix e select-pane -t :.+

bind-key -T copy-mode-vi Escape send-keys -X cancel
# bind-key -T copy-mode-vi J send-keys NPage
# bind-key -T copy-mode-vi K send-keys PPage

bind W command-prompt -I "swap-window -t "

# open a new window in the current directory
bind '"' split-window -c "#{pane_current_path}"
bind '%' split-window -h -c "#{pane_current_path}"

bind r source-file $HOME/.config/tmux/tmux.conf \; display-message "Config reloaded..."

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind b   new-window   -n '' 'btop' # bottom
bind g   new-window   -n '' 'lazygit' # lazygit
bind y   new-window   -n '' 'lazygit --git-dir=$DOTFILES_REPO --work-tree=$HOME' # lazygit public dots repo
bind Y   new-window   -n '' 'lazygit --git-dir=$DOTFILES_PRIV_REPO --work-tree=$HOME' # lazygit private dots repo

bind-key -T copy-mode-vi C-j send-keys -X scroll-down
bind-key -T copy-mode-vi C-k send-keys -X scroll-up

set -g status-position top    # macOS / darwin style
set -g pane-active-border-style     'fg=magenta,bg=default'
set -g pane-border-style            'fg=brightblack,bg=default'
set -g status-style                 'bg=default' # transparent
set -g window-status-current-format '#[fg=red]#W' # active window color
set -g window-status-format         '#[fg=gray]#W' # inactive window color
set -g mode-style bg=yellow,fg=black
set -g message-style bg=yellow,fg=black
set -g message-command-style bg=yellow,fg=black

# Status line
set -g status-right '#H'        # empty
set -g status-left  '#[fg=blue,bold]#S #[fg=white,nobold]'

# Pane colors
set -g pane-border-style fg=magenta
set -g pane-active-border-style "bg=default fg=magenta"

bind-key / run "tmux copy-mode; tmux send-keys ?"
# set-option -g automatic-rename-format "#{?#{==:#{pane_current_command},nvim},,\#{?#{==:#{pane_current_command},bash}\,\,#{pane_current_command}}}"
set-option -g automatic-rename-format "#{?#{m/ri:^(n)?vi(m)?$,#{pane_current_command}},,\#{?#{m/ri:^bash$|^fish$|^zsh$|^tcsh$,#{pane_current_command}}\,\,#{pane_current_command}}}"

###### Prompt functions gotten from ->
# https://github.com/ianthehenry/dotfiles/blob/master/.tmux.conf #######

# select the "block" above the cursor, where "block" is either a command (text
# after a prompt) or a series of output lines (contiguous chunk of text with
# no prompt)
bind -n S-M-Up {
  copy-mode
  send -X clear-selection
  send -X start-of-line
  send -X start-of-line

  # note that ${copy_cursor_line} is the displayed line, not the physical
  # line. so this won't detect that we're on a prompt in the case of a
  # partial line output right before us, or in the case that the arrow is
  # soft-wrapped to be on a new line

  # If you're on a prompt line, do nothing
  if -F "#{m/ri:^,#{copy_cursor_line}}" {} { 
    # If we started doing our thing in the middle of nowhere,
    # we go up to the second closest PS1 to us and select that. 
    send -X search-backward-text " "
  }
  send -X start-of-line
  send -X cursor-up
  send -X cursor-up
  send -X begin-selection
  send -X search-backward-text " "
  send -X cursor-up
  send -X start-of-line
  send -X stop-selection
  # End the cursor on PS1
  send -X cursor-down
}

# select the "block" below the cursor
bind -n S-M-Down {
  copy-mode
  send -X clear-selection

  send -X start-of-line
  send -X start-of-line
  send -X search-forward-text " "
  send -X cursor-up
  send -X start-of-line
  send -X begin-selection
  send -X search-forward-text " "
  send -X search-forward-text " "
  send -X cursor-up
  send -X cursor-up
}

# https://superuser.com/questions/231002/how-can-i-search-within-the-output-buffer-of-a-tmux-shell#comment2420392_1253137
# send selected lines to buffer
# bind-key -T copy-mode-vi C-F {
#     send -X copy-selection 
#     send -X stop-selection
#     save-buffer /tmp/tmux
#     send-keys Escape
#     send-keys Escape 'dnvim "+normal ,rg" /tmp/tmux' Enter
# }

# jump to the previous prompt
bind -n M-Up {
  copy-mode

  send -X start-of-line
  send -X search-backward-text " "

  # now we clear the search text
  send -X stop-selection

  # and then reposition the cursor to match the beginning of the text
  send -X -N 2 cursor-right
}

# jump to the next prompt
bind -n M-Down {
  copy-mode
  send -X search-forward-text " "
  send -X stop-selection
  send -X -N 2 cursor-right
}


# M-MouseDown1Pane is no-op because mousedown event will cause any cursor movements to move to mouse position
# https://github.com/tmux/tmux/issues/3642
bind -n M-MouseDown1Pane { copy-mode; send -X rectangle-toggle; send -X rectangle-toggle; }

# TODO: Copy command of last-prompt

# Copy command output under cursor
bind -T copy-mode-vi C-Y {
  send -X clear-selection
  send -X start-of-line
  send -X start-of-line
  
  # If you're on a prompt line, do nothing
  if -F "#{m/ri:^,#{copy_cursor_line}}" {} { 
    send -X search-backward-text " "
  }
  send -X cursor-up
  send -X begin-selection
  send -X search-forward-text " "
  send -X search-again
  send -X cursor-up
  send -X cursor-up
  send -X start-of-line
  send -X copy-selection 
  send -X stop-selection
  send-keys Escape
}

# Search within command output
bind -T copy-mode-vi C-F {
  send -X clear-selection
  send -X start-of-line
  send -X start-of-line
  
  # If you're on a prompt line, do nothing
  if -F "#{m/ri:^,#{copy_cursor_line}}" {} { 
    send -X search-backward-text " "
  }
  send -X cursor-up
  send -X begin-selection
  send -X search-forward-text " "
  send -X search-again
  send -X cursor-up
  send -X cursor-up
  send -X start-of-line
  send -X copy-selection 
  send -X stop-selection
  save-buffer /tmp/tmux
  send-keys Escape
  new-window   -n '' 'nvim "+normal ,rg" /tmp/tmux'
}

# Search within gdb output
bind -T copy-mode-vi C-G {
  send -X clear-selection
  send -X start-of-line
  send -X start-of-line
  
  # If you're on a prompt line, do nothing
  if -F "#{m/ri:^(gdb),#{copy_cursor_line}}" {} { 
    send -X search-backward-text "(gdb) "
  }
  send -X start-of-line
  send -X begin-selection
  send -X search-forward-text "(gdb) "
  # send -X search-again
  send -X cursor-up
  send -X end-of-line
  send -X copy-selection 
  send -X stop-selection
  save-buffer /tmp/gdb
  send-keys Escape
  new-window -n '' 'nvim "+normal ,rg" /tmp/gdb'
}

# Removing #{pane_current_path} means that the dir at which tmux session was
# created will be used always despite pane directory being different
set -ga status-left '#(gitmux -cfg $HOME/.config/tmux/gitmux.conf)'

set -g @t-bind "T"

# Plugins
set -g @plugin 'hqkhan/t-smart-tmux-session-manager'

set -g @tpm-clean 'u'
# Run the plugin manager 
run '~/.tmux/plugins/tpm/tpm'
