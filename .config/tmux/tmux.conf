# True color support
set -g default-terminal "screen-256color"

# enable full colors if TERM outside is xterm-256color
# this is required for using nvim's :set termguicolors
set-option -sa terminal-overrides ',xterm-256color:RGB'
set-option -sa terminal-overrides ',screen-256color:RGB'

# set-option -ga terminal-overrides ",*256col*:Tc"
# set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
# set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0
set -g mouse on

set-option -g default-shell "/bin/bash"
set -g default-command "/bin/bash"

set -g base-index 1
setw -g pane-base-index 1
setw -g mode-keys vi

set -g automatic-rename on 
set -g detach-on-destroy off  # don't exit from tmux when closing a session
set -g history-limit 100000   # scrollback buffer n lines
set -g escape-time 0          # zero-out escape time delay
set -g status-interval 1      # update status every 1 seconds
set -g status-left-length 200 # increase status line length
set -g renumber-windows on    # renumber windows when a window is closed
set -g set-clipboard on

bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
bind-key -T prefix e select-pane -t :.+

bind-key -T copy-mode-vi Escape send-keys -X cancel
bind-key -T copy-mode-vi J send-keys NPage
bind-key -T copy-mode-vi K send-keys PPage

bind W command-prompt -I "swap-window -t "

# open a new window in the current directory
# bind c new-window -c "#{pane_current_path}"
bind '"' split-window -c "#{pane_current_path}"
bind '%' split-window -h -c "#{pane_current_path}"

bind r source-file $HOME/.config/tmux/tmux.conf \; display-message "Config reloaded..."

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind g   new-window   -n '' 'lazygit' # lazygit
bind y   new-window   -n '' 'lazygit --git-dir=$YADM_REPO --work-tree=$HOME' # lazygit yadm
bind Y   new-window   -n '' 'lazygit --git-dir=$YADM_PRIV_REPO --work-tree=$HOME' # lazygit priv yadm

bind-key -T copy-mode-vi C-j send-keys -X scroll-down
bind-key -T copy-mode-vi C-k send-keys -X scroll-up

set -g status-position top    # macOS / darwin style
set -g pane-active-border-style     'fg=magenta,bg=default'
set -g pane-border-style            'fg=brightblack,bg=default'
set -g status-style                 'bg=default' # transparent
set -g window-status-current-format '#[fg=red]#W' # active window color
set -g window-status-format         '#[fg=gray]#W' # inactive window color
set -g mode-style bg=yellow,fg=black
set -g message-style bg=yellow,fg=black
set -g message-command-style bg=yellow,fg=black

# Status line
set -g status-right ''        # empty
set -g status-left  '#[fg=blue,bold]#S #[fg=white,nobold]'

# Pane colors
set -g pane-border-style fg=magenta
set -g pane-active-border-style "bg=default fg=magenta"

bind-key / run "tmux copy-mode; tmux send-keys ?"
# set-option -g automatic-rename-format "#{?#{==:#{pane_current_command},nvim},,\#{?#{==:#{pane_current_command},bash}\,\,#{pane_current_command}}}"
set-option -g automatic-rename-format "#{?#{m/ri:^(n)?vi(m)?$,#{pane_current_command}},,\#{?#{m/ri:^bash$|^fish$|^zsh$|^tcsh$,#{pane_current_command}}\,\,#{pane_current_command}}}"


###### Prompt functions gotten from ->
# https://github.com/ianthehenry/dotfiles/blob/master/.tmux.conf #######

# select the "block" above the cursor, where "block" is either a command (text
# after a prompt) or a series of output lines (contiguous chunk of text with
# no prompt)
bind -n S-M-Up {
  copy-mode
  send -X clear-selection

  # Doing this twice in a row is code for "go to the start
  # of the soft-wrapped line." You cannot get the same effect
  # with -N 2. This effectively puts us at the start of the
  # current line, even if it is a command input that has wrapped
  # over the edge of the screen.
  send -X start-of-line
  send -X start-of-line

  send -X cursor-up
  send -X cursor-up
  send -X cursor-up
  send -X start-of-line
  send -X start-of-line

  # note that ${copy_cursor_line} is the displayed line, not the physical
  # line. so this won't detect that we're on a prompt in the case of a
  # partial line output right before us, or in the case that the arrow is
  # soft-wrapped to be on a new line
  if -F "#{m:* *,#{copy_cursor_line}}" {
    # if you're on a prompt line, select the text after the prompt
    # send -X search-forward-text " "
    # send -X stop-selection
    # send -X -N 2 cursor-right
    send -X begin-selection
    # run it twice to handle soft-wrapped lines
    # send -X end-of-line
    # send -X end-of-line

    # remove this block in mode-keys emacs
    if "#{m:* *,#{copy_cursor_line}}" {
      send -X cursor-left
    }
  } {
    send -X end-of-line
    send -X end-of-line

    # on emacs, you have to move one more to the right to select the
    # newline character. this is not necessary in vi mode.
    # send -X cursor-right

    # yes, it would be nice to use select-line, but the trick to move by
    # physical lines doesn't work in visual line mode
    send -X begin-selection
    send -X search-backward-text " "
    send -X end-of-line
    send -X end-of-line
    send -X cursor-right
    send -X cursor-up
    send -X cursor-up
    send -X stop-selection
    send -X cursor-down
  }
}

# select the "block" below the cursor
bind -n S-M-Down {
  copy-mode
  send -X clear-selection

  if -F "#{m:* *,#{copy_cursor_line}}" {
    send -X end-of-line
    # if you are on a prompt line, select the text after the prompt
    send -X search-forward-text " "
    send -X cursor-up
    send -X start-of-line
    send -X begin-selection
    send -X cursor-down
    send -X end-of-line
    send -X search-forward-text " "
    send -X cursor-up
    send -X cursor-up
    send -X end-selection
  } {
    # if you are not on a prompt line, you're on the first line of output
    send -X search-forward-text " "
    send -X cursor-up
    send -X start-of-line
    send -X begin-selection
    send -X search-forward-text " "
    send -X search-forward-text " "
    send -X cursor-up
    send -X cursor-up
    send -X start-of-line
    send -X stop-selection
    # send -X cursor-left
  }
}

# send selected lines to buffer
bind-key -T copy-mode-vi F {
    send -X copy-selection 
    send -X stop-selection
    save-buffer /tmp/tmux
    send-keys Escape
    send-keys Escape 'dnvim "+normal ,rg" /tmp/tmux' Enter
}

# https://superuser.com/questions/231002/how-can-i-search-within-the-output-buffer-of-a-tmux-shell#comment2420392_1253137
bind-key v 'capture-pane' \; \
  capture-pane -S - \; \
  save-buffer /tmp/tmux \; \
  delete-buffer \; \
  send-keys Escape 'dnvim "+normal G" +"?^ " /tmp/tmux' Enter

# jump to the previous prompt
bind -n M-Up {
  copy-mode

  send -X start-of-line
  # I use a non-breaking space because tmux trims trailing whitespace off of
  # scrollback lines. That means if you hit enter without typing anything,
  # you will have a line like "~/src ➜" in your scrollback buffer instead of
  # "~/src ➜ ". But the nbsp does not get chopped like this.
  send -X search-backward-text " "

  # if we are on the very first prompt line, the search-backward-text will do
  # nothing, and we'll be stuck at the start-of-line. So we want to reposition
  # the cursor after the prompt unconditionally:
  # send -X start-of-line
  # send -X search-forward-text " "
  #
  # now we clear the search text
  send -X stop-selection
  #
  # and then reposition the cursor to match the beginning of the text
  send -X -N 2 cursor-right
}

# jump to the next prompt
bind -n M-Down {
  copy-mode
  send -X search-forward-text " "
  send -X stop-selection
  send -X -N 2 cursor-right
}

# Removing #{pane_current_path} means that the dir at which tmux session was
# created will be used always despite pane directory being different
set -ga status-left '#(~/tools-repo/gitmux/gitmux -cfg $HOME/.config/tmux/gitmux.conf)'

# Fuzzback config
# set -g @fuzzback-bind /
# set -g @fuzzback-popup 1
# set -g @fuzzback-popup-size '95%'
# set -g @fuzzback-fzf-bind ''
# set -g @fuzzback-fzf-colors 'bg+:#656A7c,gutter:#323F4E,pointer:#F48FB1,info:#ffe6b3,hl:#F48FB1,hl+:#F48FB1,border:#FFFFFF'

# Plugins
set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'joshmedeski/tmux-nerd-font-window-name'
# set -g @plugin 'hqkhan/tmux-nerd-font-window-name'
# set -g @plugin 'joshmedeski/t-smart-tmux-session-manager'
set -g @plugin 'hqkhan/t-smart-tmux-session-manager'
# set -g @plugin 'roosta/tmux-fuzzback'

set -g @tpm-clean 'u'

# TMUX plugin manager - This must run last #
## Check to see if tmux is installed, if not clone the repo. This assumes Git is # installed. 
# run-shell "if [ \"test ! -d ~/.tmux/plugins/tpm\" ]; then \"run \'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins\'\" "

# Run the plugin manager 
run '~/.tmux/plugins/tpm/tpm'
